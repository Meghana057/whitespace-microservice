version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: whitespace_postgres
    environment:
      POSTGRES_DB: whitespace_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: whitespace_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Whitespace Microservice (optional - for full containerization)
  whitespace-service:
    build: .
    container_name: whitespace_microservice
    environment:
      DATABASE_URL: postgresql://postgres:whitespace_password@postgres:5432/whitespace_db
      DATABASE_HOST: postgres
      DATABASE_NAME: whitespace_db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: whitespace_password
      DATABASE_PORT: 5432
      SERVICE_HOST: 0.0.0.0
      SERVICE_PORT: 8000
      LOG_LEVEL: INFO
      ML_THRESHOLD: 0.5
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis (optional - for future caching)
  redis:
    image: redis:7-alpine
    container_name: whitespace_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: whitespace_network